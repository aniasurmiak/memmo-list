{"version":3,"sources":["logo.svg","Logo.js","Header.js","ItemsList.js","MemoList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Logo","react_default","a","createElement","src","logo","className","alt","Header","ItemsList","this","props","items","map","item","key","id","text","Component","MemoList","_Component","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","target","value","handleSubmit","preventDefault","newItem","Date","now","state","concat","inherits","createClass","ItemsList_ItemsList","onSubmit","type","onChange","length","App","src_Logo","src_Header","src_MemoList_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,mRCUzBC,EAPF,WACX,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,IAAKC,IAAMC,UAAU,WAAWC,IAAI,WCIhCC,EAPA,WACb,OACEP,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,8BCHeM,gMAEjB,OACER,EAAAC,EAAAC,cAAA,UACGO,KAAKC,MAAMC,MAAMC,IAChB,SAAAC,GAAI,OACFb,EAAAC,EAAAC,cAAA,MAAIY,IAAKD,EAAKE,IAAKF,EAAKG,gBANGC,cC6CxBC,EA5Cf,SAAAC,GAEE,SAAAD,EAAYR,GAAO,IAAAU,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAZ,KAAAS,IACjBE,EAAAC,OAAAE,EAAA,EAAAF,CAAAZ,KAAAY,OAAAG,EAAA,EAAAH,CAAAH,GAAAO,KAAAhB,KAAMC,KAORgB,aAAe,SAACC,GACdP,EAAKQ,SAAS,CAAEZ,KAAMW,EAAME,OAAOC,SATlBV,EAYnBW,aAAe,SAACJ,GACdA,EAAMK,iBACN,IAAMC,EAAU,CACdlB,GAAImB,KAAKC,MACTnB,KAAMI,EAAKgB,MAAMpB,MAEnBI,EAAKQ,SACH,SAAAQ,GAAK,MAAK,CACRzB,MAAOyB,EAAMzB,MAAM0B,OAAOJ,GAC1BjB,KAAM,OAnBVI,EAAKgB,MAAQ,CACXpB,KAAM,GACNL,MAAO,IAJQS,EAFrB,OAAAC,OAAAiB,EAAA,EAAAjB,CAAAH,EAAAC,GAAAE,OAAAkB,EAAA,EAAAlB,CAAAH,EAAA,EAAAJ,IAAA,SAAAgB,MAAA,WA6BI,OACE9B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAACsC,EAAD,CAAW7B,MAAOF,KAAK2B,MAAMzB,QAC7BX,EAAAC,EAAAC,cAAA,QAAMuC,SAAUhC,KAAKsB,cACnB/B,EAAAC,EAAAC,cAAA,SAAOwC,KAAK,OAAO3B,GAAG,WAAW4B,SAAUlC,KAAKiB,aAAcI,MAAOrB,KAAK2B,MAAMpB,OAChFhB,EAAAC,EAAAC,cAAA,2BACaO,KAAK2B,MAAMzB,MAAMiC,OAAS,SApCjD1B,EAAA,CAA8BD,aCiBf4B,0LAZX,OACE7C,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,UAAQG,UAAU,cAChBL,EAAAC,EAAAC,cAAC4C,EAAD,MACA9C,EAAAC,EAAAC,cAAC6C,EAAD,MACA/C,EAAAC,EAAAC,cAAC8C,EAAD,eAPQ/B,cCKEgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9d8de619.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\nimport logo from './logo.svg'\n\nconst Logo = () => {\n  return (\n    <div>\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    </div>\n  )\n}\nexport default Logo","import React from 'react'\n\n\nconst Header = () => {\n  return (\n    <div>\n      <h1> My to-do list</h1>\n    </div>\n  )\n}\nexport default Header","import React, { Component } from 'react'\nimport './ItemsList.css'\n\nexport default class ItemsList extends Component {\n  render() {\n    return (\n      <ul>\n        {this.props.items.map(\n          item => (\n            <li key={item.id}>{item.text}</li>\n          )\n        )}\n      </ul>\n    )\n  }\n}\n\n","import React, { Component } from 'react'\nimport './MemoList.css'\nimport ItemsList from './ItemsList'\n\nexport class MemoList extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      text: '',\n      items: []\n    }\n  }\n\n  handleChange = (event) => {\n    this.setState({ text: event.target.value })\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const newItem = {\n      id: Date.now(),\n      text: this.state.text\n    }\n    this.setState(\n      state => ({\n        items: state.items.concat(newItem),\n        text: ''\n      })\n    )\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>My plan for today</h3>\n        <ItemsList items={this.state.items} />\n        <form onSubmit={this.handleSubmit}>\n          <input type='text' id='listItem' onChange={this.handleChange} value={this.state.text}></input>\n          <button>\n            add item #{this.state.items.length + 1}\n          </button>\n\n        </form>\n      </div>\n    )\n  }\n}\nexport default MemoList ","import React, { Component } from 'react';\nimport Logo from './Logo';\nimport Header from './Header';\n\nimport MemoList from './MemoList'\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Logo />\n          <Header />\n          <MemoList />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}